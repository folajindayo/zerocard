# ZeroCard Backend Development Guidelines

## Architecture Overview

### Project Structure
```
src/
├── config/
├── controllers/
├── middleware/
├── models/
├── routes/
├── services/
├── types/
└── utils/
```

## Database Guidelines

### PostgreSQL Setup
- Use proper database schemas
- Implement proper indexing
- Handle migrations properly
- Implement proper backups
- Use connection pooling

### Example Database Schema
```sql
-- Example User Schema
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email VARCHAR(255) UNIQUE NOT NULL,
  username VARCHAR(50) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Example Transaction Schema
CREATE TABLE transactions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id),
  amount DECIMAL(18,8) NOT NULL,
  currency VARCHAR(10) NOT NULL,
  status VARCHAR(20) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
```

## API Structure

### RESTful Endpoints
- Follow REST principles
- Use proper HTTP methods
- Implement proper versioning
- Handle rate limiting
- Implement proper documentation

### Example Route Structure
```typescript
// routes/userRoutes.ts
import express from 'express';
import { UserController } from '../controllers/UserController';
import { authMiddleware } from '../middleware/auth';

const router = express.Router();

router.post('/users', UserController.create);
router.get('/users/:id', authMiddleware, UserController.getById);
router.put('/users/:id', authMiddleware, UserController.update);
router.delete('/users/:id', authMiddleware, UserController.delete);

export default router;
```

## Authentication & Authorization

### Authentication System
- Use JWT tokens
- Implement refresh tokens
- Handle session management
- Implement proper validation
- Use secure password hashing

### Example Auth Implementation
```typescript
// middleware/auth.ts
import jwt from 'jsonwebtoken';
import { Request, Response, NextFunction } from 'express';

export const authMiddleware = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
      throw new Error('No token provided');
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET!);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ error: 'Authentication failed' });
  }
};
```

## Error Handling

### Error Guidelines
- Implement proper error classes
- Use proper status codes
- Handle async errors
- Log errors properly
- Return proper error responses

### Example Error Handling
```typescript
// utils/errors.ts
export class AppError extends Error {
  constructor(
    public statusCode: number,
    public message: string,
    public isOperational = true
  ) {
    super(message);
    Object.setPrototypeOf(this, AppError.prototype);
  }
}

// middleware/errorHandler.ts
export const errorHandler = (
  error: Error,
  req: Request,
  res: Response,
  next: NextFunction
) => {
  if (error instanceof AppError) {
    return res.status(error.statusCode).json({
      status: 'error',
      message: error.message,
    });
  }

  return res.status(500).json({
    status: 'error',
    message: 'Internal server error',
  });
};
```

## Validation

### Validation Guidelines
- Validate request data
- Implement proper schemas
- Handle validation errors
- Use proper sanitization
- Implement type checking

### Example Validation
```typescript
// validation/userSchema.ts
import * as yup from 'yup';

export const createUserSchema = yup.object().shape({
  email: yup.string().email().required(),
  username: yup.string().min(3).max(50).required(),
  password: yup.string().min(8).required(),
});

// middleware/validate.ts
export const validate = (schema: yup.Schema) => async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    await schema.validate(req.body);
    next();
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};
```

## Security

### Security Guidelines
- Implement proper CORS
- Use proper headers
- Handle rate limiting
- Implement proper encryption
- Use proper authentication

### Example Security Implementation
```typescript
// config/security.ts
import helmet from 'helmet';
import cors from 'cors';
import rateLimit from 'express-rate-limit';

export const securityMiddleware = [
  helmet(),
  cors({
    origin: process.env.ALLOWED_ORIGINS?.split(','),
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization'],
  }),
  rateLimit({
    windowMs: 15 * 60 * 1000,
    max: 100,
  }),
];
```

## Testing

### Testing Guidelines
- Write unit tests
- Implement integration tests
- Use proper mocking
- Test error scenarios
- Maintain good coverage

### Example Test Implementation
```typescript
// __tests__/user.test.ts
import request from 'supertest';
import { app } from '../src/app';
import { UserService } from '../src/services/UserService';

describe('User API', () => {
  describe('POST /users', () => {
    it('should create a new user', async () => {
      const response = await request(app)
        .post('/users')
        .send({
          email: 'test@example.com',
          username: 'testuser',
          password: 'password123',
        });

      expect(response.status).toBe(201);
      expect(response.body).toHaveProperty('id');
    });
  });
});
```

## Logging

### Logging Guidelines
- Use proper logging levels
- Implement request logging
- Log error details
- Use proper formatting
- Implement log rotation

### Example Logging Implementation
```typescript
// utils/logger.ts
import winston from 'winston';

export const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});

if (process.env.NODE_ENV !== 'production') {
  logger.add(
    new winston.transports.Console({
      format: winston.format.simple(),
    })
  );
}
```

## Performance

### Performance Guidelines
- Use proper caching
- Implement query optimization
- Handle connection pooling
- Implement proper indexing
- Use proper compression

### Example Caching Implementation
```typescript
// services/cache.ts
import Redis from 'ioredis';

const redis = new Redis({
  host: process.env.REDIS_HOST,
  port: parseInt(process.env.REDIS_PORT!),
});

export const cacheService = {
  async get(key: string) {
    return await redis.get(key);
  },

  async set(key: string, value: string, expiry?: number) {
    if (expiry) {
      await redis.set(key, value, 'EX', expiry);
    } else {
      await redis.set(key, value);
    }
  },

  async del(key: string) {
    await redis.del(key);
  },
};
```

## Documentation

### Documentation Guidelines
- Document API endpoints
- Document database schema
- Document setup process
- Maintain API specs
- Document error codes

### Example API Documentation
```yaml
# swagger.yaml
paths:
  /users:
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: User created successfully
        400:
          description: Invalid input
```

## Deployment

### Deployment Guidelines
- Use proper CI/CD
- Implement proper monitoring
- Handle environment variables
- Use proper containerization
- Implement proper scaling

### Example Dockerfile
```dockerfile
# Dockerfile
FROM node:16-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

ENV NODE_ENV=production

EXPOSE 3000

CMD ["npm", "start"]
```

## Code Quality

### Quality Guidelines
- Follow style guide
- Use proper linting
- Implement proper typing
- Write clean code
- Use proper comments

### Example ESLint Configuration
```javascript
// .eslintrc.js
module.exports = {
  parser: '@typescript-eslint/parser',
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
  ],
  rules: {
    '@typescript-eslint/explicit-function-return-type': 'error',
    '@typescript-eslint/no-explicit-any': 'error',
    'no-console': 'warn',
  },
};
```

## Monitoring

### Monitoring Guidelines
- Implement health checks
- Monitor performance
- Track error rates
- Monitor resources
- Set up alerts

### Example Health Check
```typescript
// routes/healthCheck.ts
import express from 'express';
import { db } from '../config/database';
import { redis } from '../config/redis';

const router = express.Router();

router.get('/health', async (req, res) => {
  try {
    await db.query('SELECT 1');
    await redis.ping();

    res.status(200).json({
      status: 'healthy',
      database: 'connected',
      cache: 'connected',
    });
  } catch (error) {
    res.status(503).json({
      status: 'unhealthy',
      error: error.message,
    });
  }
});

export default router;
```

## Version Control

### Git Guidelines
- Use proper branching
- Write clear commits
- Use proper tagging
- Follow PR process
- Maintain changelog

### Example Git Workflow
```bash
# Feature branch workflow
git checkout -b feature/new-feature
# Make changes
git add .
git commit -m "feat: add new feature"
git push origin feature/new-feature
# Create pull request
# After review and approval
git checkout main
git pull origin main
git merge feature/new-feature
git push origin main
```

## Contributing Guidelines

### Contribution Process
1. Fork the repository
2. Create feature branch
3. Make changes
4. Write tests
5. Submit pull request

### Pull Request Template
```markdown
## Description
[Description of changes]

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Breaking change
- [ ] Documentation update

## Testing
- [ ] Unit tests
- [ ] Integration tests
- [ ] Manual testing

## Checklist
- [ ] Code follows style guidelines
- [ ] Tests added/updated
- [ ] Documentation updated
- [ ] Database migrations added
``` 